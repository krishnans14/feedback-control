{
  
    
        "post0": {
            "title": "Project SPHEREAU",
            "content": "powered by fastpages . Background . The project SPHEREAU, a French abbreviation (Solutions de Programmation Hiérarchisée pour l’Efficience des Réseaux d’EAU), is a French government funded collaborative project guided by the HYDREOS group. This project brought together the following industry and academic groups to develop a method to bring more energy efficiency to water distribution networks: . Université de Lorraine (CRAN lab) | ENGEES (Strasbourg) | SAUR | TLG Pro | IRH Ingénieur Conseil (ANTEA Group) | . My post doctoral research work was funded by this project. The work packages in which our team (CRAN) was involved in were: . Data-based model development | Leak estimation | . Main Challenges . Fairly straightforward, one may think. Throw whatever sensor data available to a machine learning algorithm, it will spit out a model. Then do some anomaly detection to get the leaks. Done. . Warning: Not so fast when you deal with real-world data Of course, real-world data has problems. Missing data, some mis-labeled data and so on are the bread and butter of data scientists. But, there was more: . Only operational data was available. Meaning, we can&#39;t train a model to understand normal behaviour and leaky behaviour. | No ground truth and no labeling of leaks or other anomalies. | The Sensor data could be missing for prolonged periods. And there were multiplicative and drift errors in Sensor data. . Important: Explain your predictions | What&#39;s the idea to describe it here? . I want to see this as an example of how traditional control theory discipline can aid in the use of machine learning tools for engineering applications. We made use of civil engineering domain background, graph theory, some good old linear algebra to augment the Machine learning model to create a nice recipe for an explainable estimation of the leaks. . This I think is how a Post-Modern-Control-Engineer (or PoMoCoE) be pacified by the use of his skills in aiding the advancing Machine learning Tsunami and not be washed away by it. . And it also clearly shows that almost all the skills a control engineer holds are transferable with the integration of Machine Learning work flow. . Exploratory Data Analysis and Feature Selection . Understanding available Sensor Data . The data available from the sites were from the following sensors: . Flow sensors | Tank Level sensors | Several other quality analysis sensors | . From the perspective of leak detection, the water quality sensors aren&#39;t useful and hence we focus only on the flow and tank sensors. The sensors were available at sampling rates between 15 minutes and 1 hour (not counting missing data) depending upon when/where a sensor is installed. . We had to hunt for sensors for which data was available over a long period of time. And perhaps, data available for a group of sensors topological close to each other (and hence connected). After analyzing 100+ sensors we focused on a few of them to develop and illustrate the approach and then generalize it. . During this data analysis, we made note of a number of things that were not explicit based on what the technicians could share with us: . Some sensor data had a weird inverted characteristics and the data needed some pre-processing to even make it look reasonable. | Data resolution capabilities of some sensors were not good and led to an oscillatory behaviour with sensor data oscillating between two quantization states. | Sensors appeared to have been changed during the period for which the data was available and displayed different characteristics. | . These aspects further reduced the sensors that we focused on. . Feature Selection/Engineering . Target: Flow Features available: Time stamp We are modelling the consumption characteristics of villages and groups of villages and are using the flow sensors (and if available, level sensors). Modelling it purely as a time-series data isn&#39;t viable because of the following challenges: . Nonlinear characteristics of the data | Presence of unknown disturbances (Sensor faults, Leaks) | Presence of systemic changes (Addition of new water consumers, characteristic change due to vacations, etc.) | . We first started looking for features that we can help in modelling the behaviour of the water network users. These can be split into three categories (apart from that of data): . The temporal features | The meteorological features | The social features | Temporal Features: Extracting features from the time stamp associated with the sensor data is the obvious first step. . Time of the day | Day of the week | Weekend or Weekday | . | Meteorological Features Using some publicly available data sets, we collected a number of meteorological features: . Temperature (per day: average, minimum, maximum ) | Humidity (per day: average) | Precipitation (day sum) | . | Social Features Again, using some publicly available details about France and in particular the region GrandEst where the villages are situated, we gathered the following features: . Holidays | School vacations | . | Post-Exploratory data analysis . Instead of having two separate features as day of the week and weekend/weekday, we did what is referred to as feature engineering. We numbered the days of the week from 1 to 5 for the week days and 14 and 15 for the week ends. | Only the temperature data from the weather features were retained. | There were other social details we wanted to integrate (such as the &#39;Bridge&#39; vacation that the French routinely take by taking a day off on Friday/Monday when there is a holiday on Thursday/Tuesday respectively). However, this was abandoned after some initial attempts. | Building a Machine-learning model . Model selection and constraining . The choice of model was tricky. Given that we are relying on features instead of inputs, the model, a blackbox machine learning model made sense. The following constaints drove the direction of choosing the model: . Nonlinear characteristics | Lack of ground truth | Presence of outliers in the training data (leaks, sensors faults) | . The lack of ground truth ruled out a neural network model. An SVM model has the capability to not worry too much about outliers and has the capability to learn any nonlinearity if an appropriate kernel is chosen (Radial Basis Function - RBF). To this, we decided to throw in another comfort . Constraining the model through domain knowledge | . That is, instead of an automatic learning algorithm to learn the hyperparameters and the parameters of the model, the hyperparameters were fixed. This would seem the solution is less generic (true), but would however work better for this specific case (also true). . Note: The winner is: A hyperparameter-constrained SVM-Regression with RBF Kernel . Model training . With all the above set up, the training of the model run smoothly. To avoid overfitting, a regularisation kernel is also computed and is used as part of the model training. The key sequences can be summarized as: . The data and the characteristics are preprocessed to give out neatly manageable inputs and ouputs. sensor_data, features = preprocessing(raw_data, characteristics) . | The Kernels are then computed using the model constraints (by fixing the hyperparameters, rbd_nodes and rbd_sigma) kernel, kernel_reg = computer_kernel_rbf(features, rbf_nodes, rbf_sigma) . | With the Kernels in place, we just run a simple regularized linear regression to obtain the kernel parameters kernel_parameters = calculate_kernel_parameters(kernel, kernel_reg, sensor_data) . | Once we have the model, we predict the flow data such that we can then use it to generate simulated data . Topological model of the Water Network . Why do we need topological model? Because, we need to find a way to distinguish between the leaks and sensor faults using the relationship between the sensors due to their positioning. . Graph equivalent through Electrical analogy . We first developed a simple electrical circuit equivalent for the sensor network. The flow sensor would be replaced by current sensors, the consumption points would be replaced by resistances (connected to ground). (The capacitances would help modelling the water tanks, but this was not included in the results). . A graph equivalent model was derived from this electrical equivalent circuit with a novelty, where the flow or the measurement is represented by edges and the consumption points represented by nodes. This is quite contrary to the traditional modelling approach, but served well for our purpose. . We then used this graph and added representations for leaks ($ mathcal{L}$) and sensor faults ($ mathcal{D}$). Both these anomalies were represented as edges with appropriate colouring. The transformation from the WDN to the graph to analyse for the next step is given in the following images . . Note that, we are assuming in Fig 5 that all the nodes have a leak and sensor faults. This is not necessarily the case in practice (and we will come to that), but is shown just for the sake of illustration. . Simultaneous detectability of Sensor faults and Leaks . Given this monstrous looking graph obtained from a simple WDN, we try to understand if we can derive conditions to distinguish between a fault and a leak and when. . Note: We prove that this is under a specific graph condition which is pretty easy to check (partition the graph into subgraphs, and verify if the subgraph containing the node 0 is a tree). Under what conditions? Assuming that we have a single measurment (from all sensors) and want to distinguish between sensor faults and leaks. . How is it useful? . The Leak Estimation Strategy . Given a large water distribution network and its graph, we partition into several subgraphs. This is necessitated because on large networks, the amplitude of flow measured by sensors sitting on top of trees can become insensitive to leaks and faults in sensors downstream. . This allows us to analyze sub-regions of a water distribution network and apply the simultaneous detectability results. . Consider all possible leak and sensor fault combinations | Obtain those combinations that are distinguishable using the detectability results | This is an offline process and needs to be done once. And for online, . Solve a simple linear equation Ax = b (x contains both leaks and sensor faults) | Apply positivity constraints on leaks | Compute the $ mathbb{L}_1$ norm | Output: The combination(s) of leaks and faults presenting the smallest norm. | This algorithm essentially reproduces LASSO, with one extra advantage. Since several combinations can have the smallest norm (it happens more than we imagine, especially when there are sensor faults), we can estimate leaks not as a single point, but as a range. This would help the engineer to make a better decision and explains the underlying process better. . Concluding Remarks . Our paper has been submitted for review and the draft version can be accessed in this archive link arXiv:2007.09401 .",
            "url": "https://krishnans14.github.io/feedback-control/projects/2020/11/30/Project-SPHEREAU.html",
            "relUrl": "/projects/2020/11/30/Project-SPHEREAU.html",
            "date": " • Nov 30, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "About This Blog",
            "content": "powered by fastpages . What&#39;s this blog about? . My name is Krishnan Srinivasarengan and I am a post-modern-control-engineer. . Warning: There is no such a thing as post-modern-control-engineer True. I made it up. But for a reason. This blog is about my reactions and responses to the transition happening around the world and their relevance to the domain of control theory and applications. . Who am I to write this? . I have a PhD in Automatic Control. I graduated from the Université de Lorraine in 2018 having done my research under the auspices of the lab, &#39;Centre de Recherche en Automatique de Nancy (CRAN)&#39; or in English, Research Center for Automatic Control in Nancy. Further, true to the spirit of a control engineer being problem solver, I have worked in several domains solving technical problems: making telecom electronics systems work, searching for sensor faults inside a nuclear reactor core, putting the smart in smart grids, optimising energy in buildings, finding leaks in water distribution networks and so on. . But all this doesn&#39;t necessarily qualify me, but what qualifies me the most is that I have/had strong opinions and I&#39;m revisiting many of them, either to defend them or to relinquish them for a better one. . Still, what is a post-modern-control-engineer? . It requires a bit of explanation (of course). . Control systems engineering isn&#39;t a traditional engineering discipline such as civil, electrical or mechanical. It is more akin to computer science engineering. Computer science engineering as a discipline grew as computers became complex, not just the electronics that underlie them, but the way a fully-built computer can do millions of different tasks in a myriad number of ways. This necessitated an abstract perspective to understand computers that are neither looking at the underlying electronics nor bothered about how a lay individual used it. To put it simply, a computer science engineer aims to guarantee the computer system would provide stable, optimized performance to attain a specific task (assuming the electronics works fine and the user isn&#39;t inputting garbage). . Like computer science engineering caters to the abstraction of computers, control engineering caters to the abstraction of all engineering systems. The discipline in its nascent form grew during the industrial revolution when the need to develop a stable system that guarantees certain performance became paramount (Steam Engine Governors)). And this leads to people making abstraction of these complex engineering systems. Until around the 1960s, this analysis focused on the frequency domain characteristics of the systems. The real-world system characteristics are written using differential equations and so analysing them in frequency domain meant the use of transforms (Laplace transforms). From the 1960s, the so-called state-space methods ushered in an era where one could directly analyze the differential equations after rewriting them in some nice form. Linear algebra started to run the show of this era referred to as the &#39;modern control era&#39;. . Unlike the revolution in computer science engineering leading to an explosion in the capabilities of a computer, modern control approaches found little takers outside of academia barring isolated successes (e.g., Kalman filter). So much so that many approaches developed in the 1940s are still widely used across many industries. For academics, it feels like walking into a computer server room to find punch cards and vacuum tubes. But for the industrial practitioners, though, the modern control theory is just unintuitive and doesn&#39;t give confidence. . After almost half a decade of the modern control era, with the advent of cheap sensors and a lot of data, the control community was hoping for a change of winds. And the winds are changing. But with it came a new breed of computer science engineers who suddenly repackaged the linear algebra tools that control engineers prized and started applying them to the deluge of internet-fueled data. &quot;Machine Learning is just rehashed Linear Algebra&quot; is a common refrain. It is true, but it also appears a desperate attempt to discredit someone taking away what control engineers have long prized. . As I try to be pragmatic about this situation, my interest is more on the following question . Note: Would the industry practitioners change in any meaningful way with this? Or would it just be a cosmetic makeup? Control engineering is entering a post-modern era. In some way, but starting to look at every system through the lens of data, a new discipline that merges the data-charming wizards of computer science engineering and control engineers might emerge. I&#39;m pre-empting and calling them Post-Modern-Control-Engineer (PoMoCoE). . That&#39;s why the name. . Oof, so what will there be? . Join me in the journey of discovery, nerding, nostalgia, rants, feedback control history, keeping in touch with control theory research, most importantly, my attempts to integrate into the AI/ML community (that means childish projects). .",
            "url": "https://krishnans14.github.io/feedback-control/musings/2020/11/23/About-The-Blog.html",
            "relUrl": "/musings/2020/11/23/About-The-Blog.html",
            "date": " • Nov 23, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "My name is Krishnan Srinivasarengan. I’m a control engineer by training and spirit. This blog is an attempt to understand the role of control engineer in the rapidly changing tech world, but also a place to share my thoughts, learnings, etc. . I’ve a PhD in Automatic Control from the Université de Lorraine, Nancy, France, a Masters in Electrical Engineering with the specialisation Control and Computing from the Indian Institute of Technology Bombay, India, and a Bachelors in Instrumentation and Control from National Institute of Technology, Trichy, India. . I live in France1. . at the time of this commit/writing. &#8617; . |",
          "url": "https://krishnans14.github.io/feedback-control/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://krishnans14.github.io/feedback-control/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}